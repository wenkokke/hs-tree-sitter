# HLint configuration file
# https://github.com/ndmitchell/hlint
##########################

# This file contains a template configuration file, which is typically
# placed as .hlint.yaml in the root of your project

# Specify additional command line arguments
#
# - arguments: [--color, --cpp-simple, -XQuasiQuotes]

# Control which extensions can be used
- extensions: []

# Control which flags can be used
- flags:
    - default: false
    - name: "-Wno-unused-top-binds"
      within: "TreeSitter.Internal"
    - name: "-Wno-orphans"
      within: "TreeSitter.GenerateAst.Internal.CodeGen"

# Control which modules can be used
- modules:
    - name: "Data.Set"
      as: "S"
      importStyle: "explicitOrQualified"
      qualifiedStyle: "post"
    - name: "Data.HashMap.Strict"
      as: "M"
      importStyle: "explicitOrQualified"
      qualifiedStyle: "post"
    - name: "Data.Map"
      as: "M"
      importStyle: "explicitOrQualified"
      qualifiedStyle: "post"
    - name: "Data.Text"
      as: "T"
      importStyle: "explicitOrQualified"
      qualifiedStyle: "post"
    - name: "Data.Text.Lazy"
      as: "TL"
      importStyle: "explicitOrQualified"
      qualifiedStyle: "post"
    - name: "Data.ByteString"
      as: "BS"
      importStyle: "explicitOrQualified"
      qualifiedStyle: "post"
    - name: "Data.ByteString.Lazy"
      as: "BSL"
      importStyle: "explicitOrQualified"
      qualifiedStyle: "post"
    - name: "Prelude"
      importStyle: "unqualified"
    - name: "**"
      importStyle: "explicitOrQualified"
      qualifiedStyle: "post"

# Control which functions can be used
- functions:
    - name: unsafePerformIO
      within: []

# Add custom hints for this project
#
# Will suggest replacing "wibbleMany [myvar]" with "wibbleOne myvar"
# - error: {lhs: "wibbleMany [x]", rhs: wibbleOne x}

# The hints are named by the string they display in warning messages.
# For example, if you see a warning starting like
#
# Main.hs:116:51: Warning: Redundant ==
#
# You can refer to that hint with `{name: Redundant ==}` (see below).

# Turn on hints that are off by default

# Ban "module X(module X) where", to require a real export list
# - warn: {name: Use explicit module export list}

# Replace a $ b $ c with a . b $ c
- group: { name: dollar, enabled: true }

# Generalise map to fmap, ++ to <>
- group: { name: generalise, enabled: true }

# Warn on use of partial functions
- group: { name: partial, enabled: true }

# Enable hints for future-proofing
- group:
    name: future,
    enabled: true
# Ignore some builtin hints
# - ignore: {name: Use let}
# - ignore: {name: Use const, within: SpecialModule} # Only within certain modules

# Define some custom infix operators
# - fixity: infixr 3 ~^#^~

# To generate a suitable file for HLint do:
# $ hlint --default > .hlint.yaml
