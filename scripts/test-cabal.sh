#!/bin/sh -e

# Read the expected version:
EXPECT_VERSION="$(awk -F'=' '/^cabal=/{print$2}' ./scripts/dev-dependencies.txt)"

# Find cabal:
#
# 1. Use CABAL if it is set.
# 2. Look for cabal-$EXPECTED_VERSION.
# 3. Look for cabal.
#
if [ "${CABAL}" = "" ]; then
  if ! CABAL="$(which "cabal-${EXPECT_VERSION}")"; then
    if ! CABAL="$(which "cabal")"; then
      echo "Requires cabal ${EXPECT_VERSION}; no version found"
      exit 1
    fi
  fi
fi

# Check cabal version:
ACTUAL_VERSION="$("${CABAL}" --numeric-version | head -n 1)"
if [ "${ACTUAL_VERSION}" != "${EXPECT_VERSION}" ]; then
  # Version mismatch is never an error:
  echo "Requires cabal ${EXPECT_VERSION}; version ${ACTUAL_VERSION} found"
fi

# Create sdist for all packages
#
#   dist-newstyle/sdist/
#   ├── base-compat-constptr-0.1.0.0.tar.gz
#   ├── hs-tree-sitter-13.0.14.0.tar.gz
#   ├── hs-tree-sitter-capi-13.0.14.0.tar.gz
#   ├── hs-tree-sitter-generate-ast-0.1.0.0.tar.gz
#   ├── hs-tree-sitter-test-13.0.14.0.tar.gz
#   ├── tree-sitter-javascript-0.0.0.0.tar.gz
#   └── tree-sitter-while-0.0.0.0.tar.gz
#
${CABAL} sdist all

# Unpack sdist for all packages
rm -rf dist-newstyle/unpacked
mkdir -p dist-newstyle/unpacked
find dist-newstyle/sdist/ \
  -maxdepth 1 \
  -type f \
  -name '*.tar.gz' \
  -exec tar -C dist-newstyle/unpacked -xzvf {} \;

# Create cabal.project.sdist file
CABAL_PROJECT_SDIST="cabal.project.sdist"
echo "-- This file was generated by ./scripts/build-cabal.sh" > ${CABAL_PROJECT_SDIST}
find dist-newstyle/unpacked/ \
  -name '*-*' \
  -maxdepth 1 \
  -type d | \
  while read -r dir; do
    echo "packages: ${dir}" >> ${CABAL_PROJECT_SDIST}
  done

# Build all packages
${CABAL} build all --project-file=${CABAL_PROJECT_SDIST}

# Test all packages
${CABAL} test all --project-file=${CABAL_PROJECT_SDIST}
